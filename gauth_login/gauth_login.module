<?php
/**
 * @file
 * Google Auth Login API for Backdrop.
 */


/**
 * Implements hook_menu().
 */
function gauth_login_menu() {
  $items = array();
  $items['admin/config/services/gauth_login'] = array(
    'title' => 'Google auth login',
    'description' => 'Configure Google Auth Login settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('gauth_login_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'gauth_login.admin.inc',
  );
  return $items;
}


/**
 * Implements hook_config_info().
 */
function gauth_login_config_info() {
  $prefixes['gauth_login.settings'] = array(
    'label' => t('Google Auth Login settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}


/**
 * Implements hook_gauth_google_response().
 */
function gauth_login_gauth_google_response() {
  $config = config('gauth_login.settings');
  if (isset($_GET['state'])) {
    $state = json_decode($_GET['state'], TRUE);
    if (isset($state['src']) && $state['src'] != 'gauth_login') {
      // Handle response only if the request was from gauth_login.
      return;
    }
    if ($state['hash'] != $_SESSION['gauth_login_state']['hash']) {
      backdrop_set_message(t('Invalid state parameter'), 'error');
      backdrop_access_denied();
      return;
    }
    $redirect_url = isset($state['destination']) ? $state['destination'] : '';
    if (isset($_GET['code'])) {
      $client_id = $config->get('gauth_login_client_id');
      $client_secret = $config->get('gauth_login_client_secret');
      $api_key = $config->get('gauth_login_developer_key');
      $client = new Google_Client();
      $client->setApplicationName("Google OAuth2");
      $client->setClientId($client_id);
      $client->setClientSecret($client_secret);
      $client->setRedirectUri(gauth_callback_url());
      $client->setDeveloperKey($api_key);
      $client->setApprovalPrompt('force');
      $scopes = gauth_google_services_scopes('oauth2');
      $client->addScope($scopes);
      $client->fetchAccessTokenWithAuthCode($_GET['code']);
      $account['access_token'] = json_encode($client->getAccessToken());

      $client = new Google_Client();
      $client->setApplicationName("Google OAuth2");
      $client->setClientId($client_id);
      $client->setClientSecret($client_secret);
      $client->setRedirectUri(gauth_callback_url());
      $client->setDeveloperKey($api_key);
      $client->setApprovalPrompt('force');
      $client->setAccessToken($account['access_token']);
      $scopes = gauth_google_services_scopes('oauth2');
      $client->addScope($scopes);
      $oauth = new Google_Service_Oauth2($client);
      $info = $oauth->userinfo->get();
      if ($uid = gauth_login_load_google_id($info['id'])) {
        $form_state['uid'] = $uid;
        user_login_submit(array(), $form_state);
      }
      else {
        $account['client_id'] = $config->get('gauth_login_client_id');
        $account['client_secret'] = $config->get('gauth_login_client_secret');
        $account['developer_key'] = $config->get('gauth_login_developer_key');
        $account['services'] = 'oauth2';
        $account['is_authenticated'] = TRUE;

        if (!$new_user = gauth_login_find_existing_user($info)) {
          if ($config->get('gauth_login_create_user')) {
            $user = entity_create('user', array());
            $user->mail = $info['email'];
            $user->name = user_load_by_name($info['name']) ? $info['name'] . time() : $info['name'];
            $user->is_new = TRUE;
            $user->status = 1;
            $new_user = user_save($user);
          }
          else {
            backdrop_set_message(t($config->get('gauth_login_create_user_not_allowed_message')));
            backdrop_goto('user/login');
          }
        }
        $form_state['uid'] = $new_user->uid;
        user_login_submit(array(), $form_state);
        global $user;
        $token = backdrop_hash_base64(backdrop_random_bytes(55));
        $_SESSION['pass_reset_' . $user->uid] = $token;
        if ($config->get('gauth_login_prom_message')) {
          backdrop_set_message(t("Click <a href='!url' target=_blank>here</a> to set password", array('!url' => url('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token))))), 'warning');
        }
        $gauth_login = array(
          'google_id' => $info['id'],
          'uid' => $user->uid,
        );
        backdrop_write_record('gauth_login', $gauth_login);
        $account['name'] = 'Gauth Login ' . $user->uid;
        $account['uid'] = $user->uid;
        backdrop_write_record('gauth_accounts', $account);
      }
    }
    backdrop_goto($redirect_url);
  }
}


/**
 * Find an existing user based on info from Google.
 *
 * @param array $info
 *   The 'userinfo' array from OAuth.
 *
 * @return object|NULL
 *   An existing Backdrop user object if found; otherwise NULL.
 */
function gauth_login_find_existing_user($info) {
  // First, see if there is a user with the given e-mail.
  if ($new_user = user_load_by_mail($info['email'])) {
    return $new_user;
  }

  // Next, see if any modules have another way of tracking down existing users.
  foreach (module_implements('gauth_login_find_existing_user') as $module) {
    if ($new_user = module_invoke($module, 'gauth_login_find_existing_user', $info)) {
      return $new_user;
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function gauth_login_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    $css_path = backdrop_get_path('module', 'gauth_login') . '/css/';
    $button_style = config_get('gauth_login.settings', 'gauth_login_button_style');
    $form['submit_google'] = array(
      '#type' => 'submit',
      '#value' => t(''),
      '#submit' => array('gauth_login_user_login_submit'),
      '#limit_validation_errors' => array(),
      '#weight' => 1000,
      '#attributes' => array(
        'class' => array('gauth-login-button-style-' . $button_style),
      ),
      '#attached' => array(
        'css' => array(
          $css_path . 'gauth_login.login.css',
        ),
      ),
    );
  }
}


/**
 * Login using Google, submit handler.
 */
function gauth_login_user_login_submit() {
  $config = config('gauth_login.settings');
  if ($config->get('gauth_login_client_id')) {
    gauth_load_google_api();
    $client = new Google_Client();
    $client->setApplicationName("Google OAuth2");
    $client->setClientId($config->get('gauth_login_client_id'));
    $client->setClientSecret($config->get('gauth_login_client_secret'));
    $client->setRedirectUri(gauth_callback_url());
    $client->setDeveloperKey($config->get('gauth_login_developer_key'));
    $scopes = gauth_google_services_scopes('oauth2');
    $client->addScope($scopes);
    if (!isset($_SESSION['gauth_login_state'])) {
      $state = array(
        'src' => 'gauth_login',
        'hash' => md5(rand()),
      );
      if (isset($_GET['destination'])) {
        $state['destination'] = $_GET['destination'];
        unset($_GET['destination']);
      }
    }
    else {
      $state = $_SESSION['gauth_login_state'];
    }
    $_SESSION['gauth_login_state'] = $state;
    $state = backdrop_json_encode($state);
    $client->setState($state);

    $url = $client->createAuthUrl();
    if ($restrict_domain = $config->get('gauth_login_domain_restriction')) {
      $url .= '&hd=' . $restrict_domain;
    }

    backdrop_goto($url);
  }
  else {
    backdrop_set_message(t('Gauth Login is not configured. Please contact site administrator.'), 'error');
  }
}


/**
 * Implements hook_user_delete().
 */
function gauth_login_user_delete($user) {
  db_delete('gauth_login')
    ->condition('uid', $user->uid)
    ->execute();
}


/**
 * Return uid of passed Google id.
 */
function gauth_login_load_google_id($id) {
  $rs = db_select('gauth_login', 'gl')
    ->fields('gl', array('uid'))
    ->condition('google_id', $id, '=')
    ->execute()
    ->fetchAssoc();
  return empty($rs) ? FALSE : $rs['uid'];
}
